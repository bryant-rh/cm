// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/bryant-rh/cm/internal/model"
)

func newNamespace(db *gorm.DB) namespace {
	_namespace := namespace{}

	_namespace.namespaceDo.UseDB(db)
	_namespace.namespaceDo.UseModel(&model.Namespace{})

	tableName := _namespace.namespaceDo.TableName()
	_namespace.ALL = field.NewField(tableName, "*")
	_namespace.ID = field.NewInt32(tableName, "id")
	_namespace.NsID = field.NewString(tableName, "ns_id")
	_namespace.NsName = field.NewString(tableName, "ns_name")
	_namespace.ClusterID = field.NewString(tableName, "cluster_id")
	_namespace.SaID = field.NewString(tableName, "sa_id")
	_namespace.SaName = field.NewString(tableName, "sa_name")
	_namespace.CreatedAt = field.NewTime(tableName, "created_at")
	_namespace.UpdatedAt = field.NewTime(tableName, "updated_at")

	_namespace.fillFieldMap()

	return _namespace
}

type namespace struct {
	namespaceDo namespaceDo

	ALL       field.Field
	ID        field.Int32
	NsID      field.String
	NsName    field.String
	ClusterID field.String
	SaID      field.String
	SaName    field.String
	CreatedAt field.Time
	UpdatedAt field.Time

	fieldMap map[string]field.Expr
}

func (n namespace) Table(newTableName string) *namespace {
	n.namespaceDo.UseTable(newTableName)
	return n.updateTableName(newTableName)
}

func (n namespace) As(alias string) *namespace {
	n.namespaceDo.DO = *(n.namespaceDo.As(alias).(*gen.DO))
	return n.updateTableName(alias)
}

func (n *namespace) updateTableName(table string) *namespace {
	n.ALL = field.NewField(table, "*")
	n.ID = field.NewInt32(table, "id")
	n.NsID = field.NewString(table, "ns_id")
	n.NsName = field.NewString(table, "ns_name")
	n.ClusterID = field.NewString(table, "cluster_id")
	n.SaID = field.NewString(table, "sa_id")
	n.SaName = field.NewString(table, "sa_name")
	n.CreatedAt = field.NewTime(table, "created_at")
	n.UpdatedAt = field.NewTime(table, "updated_at")

	n.fillFieldMap()

	return n
}

func (n *namespace) WithContext(ctx context.Context) *namespaceDo {
	return n.namespaceDo.WithContext(ctx)
}

func (n namespace) TableName() string { return n.namespaceDo.TableName() }

func (n namespace) Alias() string { return n.namespaceDo.Alias() }

func (n *namespace) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := n.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (n *namespace) fillFieldMap() {
	n.fieldMap = make(map[string]field.Expr, 8)
	n.fieldMap["id"] = n.ID
	n.fieldMap["ns_id"] = n.NsID
	n.fieldMap["ns_name"] = n.NsName
	n.fieldMap["cluster_id"] = n.ClusterID
	n.fieldMap["sa_id"] = n.SaID
	n.fieldMap["sa_name"] = n.SaName
	n.fieldMap["created_at"] = n.CreatedAt
	n.fieldMap["updated_at"] = n.UpdatedAt
}

func (n namespace) clone(db *gorm.DB) namespace {
	n.namespaceDo.ReplaceDB(db)
	return n
}

type namespaceDo struct{ gen.DO }

func (n namespaceDo) Debug() *namespaceDo {
	return n.withDO(n.DO.Debug())
}

func (n namespaceDo) WithContext(ctx context.Context) *namespaceDo {
	return n.withDO(n.DO.WithContext(ctx))
}

func (n namespaceDo) ReadDB() *namespaceDo {
	return n.Clauses(dbresolver.Read)
}

func (n namespaceDo) WriteDB() *namespaceDo {
	return n.Clauses(dbresolver.Write)
}

func (n namespaceDo) Clauses(conds ...clause.Expression) *namespaceDo {
	return n.withDO(n.DO.Clauses(conds...))
}

func (n namespaceDo) Returning(value interface{}, columns ...string) *namespaceDo {
	return n.withDO(n.DO.Returning(value, columns...))
}

func (n namespaceDo) Not(conds ...gen.Condition) *namespaceDo {
	return n.withDO(n.DO.Not(conds...))
}

func (n namespaceDo) Or(conds ...gen.Condition) *namespaceDo {
	return n.withDO(n.DO.Or(conds...))
}

func (n namespaceDo) Select(conds ...field.Expr) *namespaceDo {
	return n.withDO(n.DO.Select(conds...))
}

func (n namespaceDo) Where(conds ...gen.Condition) *namespaceDo {
	return n.withDO(n.DO.Where(conds...))
}

func (n namespaceDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *namespaceDo {
	return n.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (n namespaceDo) Order(conds ...field.Expr) *namespaceDo {
	return n.withDO(n.DO.Order(conds...))
}

func (n namespaceDo) Distinct(cols ...field.Expr) *namespaceDo {
	return n.withDO(n.DO.Distinct(cols...))
}

func (n namespaceDo) Omit(cols ...field.Expr) *namespaceDo {
	return n.withDO(n.DO.Omit(cols...))
}

func (n namespaceDo) Join(table schema.Tabler, on ...field.Expr) *namespaceDo {
	return n.withDO(n.DO.Join(table, on...))
}

func (n namespaceDo) LeftJoin(table schema.Tabler, on ...field.Expr) *namespaceDo {
	return n.withDO(n.DO.LeftJoin(table, on...))
}

func (n namespaceDo) RightJoin(table schema.Tabler, on ...field.Expr) *namespaceDo {
	return n.withDO(n.DO.RightJoin(table, on...))
}

func (n namespaceDo) Group(cols ...field.Expr) *namespaceDo {
	return n.withDO(n.DO.Group(cols...))
}

func (n namespaceDo) Having(conds ...gen.Condition) *namespaceDo {
	return n.withDO(n.DO.Having(conds...))
}

func (n namespaceDo) Limit(limit int) *namespaceDo {
	return n.withDO(n.DO.Limit(limit))
}

func (n namespaceDo) Offset(offset int) *namespaceDo {
	return n.withDO(n.DO.Offset(offset))
}

func (n namespaceDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *namespaceDo {
	return n.withDO(n.DO.Scopes(funcs...))
}

func (n namespaceDo) Unscoped() *namespaceDo {
	return n.withDO(n.DO.Unscoped())
}

func (n namespaceDo) Create(values ...*model.Namespace) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Create(values)
}

func (n namespaceDo) CreateInBatches(values []*model.Namespace, batchSize int) error {
	return n.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (n namespaceDo) Save(values ...*model.Namespace) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Save(values)
}

func (n namespaceDo) First() (*model.Namespace, error) {
	if result, err := n.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Namespace), nil
	}
}

func (n namespaceDo) Take() (*model.Namespace, error) {
	if result, err := n.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Namespace), nil
	}
}

func (n namespaceDo) Last() (*model.Namespace, error) {
	if result, err := n.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Namespace), nil
	}
}

func (n namespaceDo) Find() ([]*model.Namespace, error) {
	result, err := n.DO.Find()
	return result.([]*model.Namespace), err
}

func (n namespaceDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Namespace, err error) {
	buf := make([]*model.Namespace, 0, batchSize)
	err = n.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (n namespaceDo) FindInBatches(result *[]*model.Namespace, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return n.DO.FindInBatches(result, batchSize, fc)
}

func (n namespaceDo) Attrs(attrs ...field.AssignExpr) *namespaceDo {
	return n.withDO(n.DO.Attrs(attrs...))
}

func (n namespaceDo) Assign(attrs ...field.AssignExpr) *namespaceDo {
	return n.withDO(n.DO.Assign(attrs...))
}

func (n namespaceDo) Joins(fields ...field.RelationField) *namespaceDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Joins(_f))
	}
	return &n
}

func (n namespaceDo) Preload(fields ...field.RelationField) *namespaceDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Preload(_f))
	}
	return &n
}

func (n namespaceDo) FirstOrInit() (*model.Namespace, error) {
	if result, err := n.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Namespace), nil
	}
}

func (n namespaceDo) FirstOrCreate() (*model.Namespace, error) {
	if result, err := n.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Namespace), nil
	}
}

func (n namespaceDo) FindByPage(offset int, limit int) (result []*model.Namespace, count int64, err error) {
	result, err = n.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = n.Offset(-1).Limit(-1).Count()
	return
}

func (n namespaceDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = n.Count()
	if err != nil {
		return
	}

	err = n.Offset(offset).Limit(limit).Scan(result)
	return
}

func (n namespaceDo) Scan(result interface{}) (err error) {
	return n.DO.Scan(result)
}

func (n *namespaceDo) withDO(do gen.Dao) *namespaceDo {
	n.DO = *do.(*gen.DO)
	return n
}
