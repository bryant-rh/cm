// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/bryant-rh/cm/internal/model"
)

func newCluster(db *gorm.DB) cluster {
	_cluster := cluster{}

	_cluster.clusterDo.UseDB(db)
	_cluster.clusterDo.UseModel(&model.Cluster{})

	tableName := _cluster.clusterDo.TableName()
	_cluster.ALL = field.NewField(tableName, "*")
	_cluster.ID = field.NewInt32(tableName, "id")
	_cluster.ClusterID = field.NewString(tableName, "cluster_id")
	_cluster.ClusterName = field.NewString(tableName, "cluster_name")
	_cluster.Describe = field.NewString(tableName, "describe")
	_cluster.Labels = field.NewString(tableName, "labels")
	_cluster.CreatedAt = field.NewTime(tableName, "created_at")
	_cluster.UpdatedAt = field.NewTime(tableName, "updated_at")

	_cluster.fillFieldMap()

	return _cluster
}

type cluster struct {
	clusterDo clusterDo

	ALL         field.Field
	ID          field.Int32
	ClusterID   field.String
	ClusterName field.String
	Describe    field.String
	Labels      field.String
	CreatedAt   field.Time
	UpdatedAt   field.Time

	fieldMap map[string]field.Expr
}

func (c cluster) Table(newTableName string) *cluster {
	c.clusterDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c cluster) As(alias string) *cluster {
	c.clusterDo.DO = *(c.clusterDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *cluster) updateTableName(table string) *cluster {
	c.ALL = field.NewField(table, "*")
	c.ID = field.NewInt32(table, "id")
	c.ClusterID = field.NewString(table, "cluster_id")
	c.ClusterName = field.NewString(table, "cluster_name")
	c.Describe = field.NewString(table, "describe")
	c.Labels = field.NewString(table, "labels")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")

	c.fillFieldMap()

	return c
}

func (c *cluster) WithContext(ctx context.Context) *clusterDo { return c.clusterDo.WithContext(ctx) }

func (c cluster) TableName() string { return c.clusterDo.TableName() }

func (c cluster) Alias() string { return c.clusterDo.Alias() }

func (c *cluster) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *cluster) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 7)
	c.fieldMap["id"] = c.ID
	c.fieldMap["cluster_id"] = c.ClusterID
	c.fieldMap["cluster_name"] = c.ClusterName
	c.fieldMap["describe"] = c.Describe
	c.fieldMap["labels"] = c.Labels
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
}

func (c cluster) clone(db *gorm.DB) cluster {
	c.clusterDo.ReplaceDB(db)
	return c
}

type clusterDo struct{ gen.DO }

func (c clusterDo) Debug() *clusterDo {
	return c.withDO(c.DO.Debug())
}

func (c clusterDo) WithContext(ctx context.Context) *clusterDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c clusterDo) ReadDB() *clusterDo {
	return c.Clauses(dbresolver.Read)
}

func (c clusterDo) WriteDB() *clusterDo {
	return c.Clauses(dbresolver.Write)
}

func (c clusterDo) Clauses(conds ...clause.Expression) *clusterDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c clusterDo) Returning(value interface{}, columns ...string) *clusterDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c clusterDo) Not(conds ...gen.Condition) *clusterDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c clusterDo) Or(conds ...gen.Condition) *clusterDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c clusterDo) Select(conds ...field.Expr) *clusterDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c clusterDo) Where(conds ...gen.Condition) *clusterDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c clusterDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *clusterDo {
	return c.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (c clusterDo) Order(conds ...field.Expr) *clusterDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c clusterDo) Distinct(cols ...field.Expr) *clusterDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c clusterDo) Omit(cols ...field.Expr) *clusterDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c clusterDo) Join(table schema.Tabler, on ...field.Expr) *clusterDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c clusterDo) LeftJoin(table schema.Tabler, on ...field.Expr) *clusterDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c clusterDo) RightJoin(table schema.Tabler, on ...field.Expr) *clusterDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c clusterDo) Group(cols ...field.Expr) *clusterDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c clusterDo) Having(conds ...gen.Condition) *clusterDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c clusterDo) Limit(limit int) *clusterDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c clusterDo) Offset(offset int) *clusterDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c clusterDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *clusterDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c clusterDo) Unscoped() *clusterDo {
	return c.withDO(c.DO.Unscoped())
}

func (c clusterDo) Create(values ...*model.Cluster) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c clusterDo) CreateInBatches(values []*model.Cluster, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c clusterDo) Save(values ...*model.Cluster) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c clusterDo) First() (*model.Cluster, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Cluster), nil
	}
}

func (c clusterDo) Take() (*model.Cluster, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Cluster), nil
	}
}

func (c clusterDo) Last() (*model.Cluster, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Cluster), nil
	}
}

func (c clusterDo) Find() ([]*model.Cluster, error) {
	result, err := c.DO.Find()
	return result.([]*model.Cluster), err
}

func (c clusterDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Cluster, err error) {
	buf := make([]*model.Cluster, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c clusterDo) FindInBatches(result *[]*model.Cluster, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c clusterDo) Attrs(attrs ...field.AssignExpr) *clusterDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c clusterDo) Assign(attrs ...field.AssignExpr) *clusterDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c clusterDo) Joins(fields ...field.RelationField) *clusterDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c clusterDo) Preload(fields ...field.RelationField) *clusterDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c clusterDo) FirstOrInit() (*model.Cluster, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Cluster), nil
	}
}

func (c clusterDo) FirstOrCreate() (*model.Cluster, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Cluster), nil
	}
}

func (c clusterDo) FindByPage(offset int, limit int) (result []*model.Cluster, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c clusterDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c clusterDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c *clusterDo) withDO(do gen.Dao) *clusterDo {
	c.DO = *do.(*gen.DO)
	return c
}
