// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/bryant-rh/cm/internal/model"
)

func newClusterBind(db *gorm.DB) clusterBind {
	_clusterBind := clusterBind{}

	_clusterBind.clusterBindDo.UseDB(db)
	_clusterBind.clusterBindDo.UseModel(&model.ClusterBind{})

	tableName := _clusterBind.clusterBindDo.TableName()
	_clusterBind.ALL = field.NewField(tableName, "*")
	_clusterBind.ID = field.NewInt32(tableName, "id")
	_clusterBind.ProjectID = field.NewString(tableName, "project_id")
	_clusterBind.ClusterID = field.NewString(tableName, "cluster_id")
	_clusterBind.ProjectName = field.NewString(tableName, "project_name")
	_clusterBind.ClusterName = field.NewString(tableName, "cluster_name")
	_clusterBind.CreatedAt = field.NewTime(tableName, "created_at")
	_clusterBind.UpdatedAt = field.NewTime(tableName, "updated_at")

	_clusterBind.fillFieldMap()

	return _clusterBind
}

type clusterBind struct {
	clusterBindDo clusterBindDo

	ALL         field.Field
	ID          field.Int32
	ProjectID   field.String
	ClusterID   field.String
	ProjectName field.String
	ClusterName field.String
	CreatedAt   field.Time
	UpdatedAt   field.Time

	fieldMap map[string]field.Expr
}

func (c clusterBind) Table(newTableName string) *clusterBind {
	c.clusterBindDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c clusterBind) As(alias string) *clusterBind {
	c.clusterBindDo.DO = *(c.clusterBindDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *clusterBind) updateTableName(table string) *clusterBind {
	c.ALL = field.NewField(table, "*")
	c.ID = field.NewInt32(table, "id")
	c.ProjectID = field.NewString(table, "project_id")
	c.ClusterID = field.NewString(table, "cluster_id")
	c.ProjectName = field.NewString(table, "project_name")
	c.ClusterName = field.NewString(table, "cluster_name")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")

	c.fillFieldMap()

	return c
}

func (c *clusterBind) WithContext(ctx context.Context) *clusterBindDo {
	return c.clusterBindDo.WithContext(ctx)
}

func (c clusterBind) TableName() string { return c.clusterBindDo.TableName() }

func (c clusterBind) Alias() string { return c.clusterBindDo.Alias() }

func (c *clusterBind) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *clusterBind) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 7)
	c.fieldMap["id"] = c.ID
	c.fieldMap["project_id"] = c.ProjectID
	c.fieldMap["cluster_id"] = c.ClusterID
	c.fieldMap["project_name"] = c.ProjectName
	c.fieldMap["cluster_name"] = c.ClusterName
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
}

func (c clusterBind) clone(db *gorm.DB) clusterBind {
	c.clusterBindDo.ReplaceDB(db)
	return c
}

type clusterBindDo struct{ gen.DO }

func (c clusterBindDo) Debug() *clusterBindDo {
	return c.withDO(c.DO.Debug())
}

func (c clusterBindDo) WithContext(ctx context.Context) *clusterBindDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c clusterBindDo) ReadDB() *clusterBindDo {
	return c.Clauses(dbresolver.Read)
}

func (c clusterBindDo) WriteDB() *clusterBindDo {
	return c.Clauses(dbresolver.Write)
}

func (c clusterBindDo) Clauses(conds ...clause.Expression) *clusterBindDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c clusterBindDo) Returning(value interface{}, columns ...string) *clusterBindDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c clusterBindDo) Not(conds ...gen.Condition) *clusterBindDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c clusterBindDo) Or(conds ...gen.Condition) *clusterBindDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c clusterBindDo) Select(conds ...field.Expr) *clusterBindDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c clusterBindDo) Where(conds ...gen.Condition) *clusterBindDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c clusterBindDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *clusterBindDo {
	return c.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (c clusterBindDo) Order(conds ...field.Expr) *clusterBindDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c clusterBindDo) Distinct(cols ...field.Expr) *clusterBindDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c clusterBindDo) Omit(cols ...field.Expr) *clusterBindDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c clusterBindDo) Join(table schema.Tabler, on ...field.Expr) *clusterBindDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c clusterBindDo) LeftJoin(table schema.Tabler, on ...field.Expr) *clusterBindDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c clusterBindDo) RightJoin(table schema.Tabler, on ...field.Expr) *clusterBindDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c clusterBindDo) Group(cols ...field.Expr) *clusterBindDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c clusterBindDo) Having(conds ...gen.Condition) *clusterBindDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c clusterBindDo) Limit(limit int) *clusterBindDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c clusterBindDo) Offset(offset int) *clusterBindDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c clusterBindDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *clusterBindDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c clusterBindDo) Unscoped() *clusterBindDo {
	return c.withDO(c.DO.Unscoped())
}

func (c clusterBindDo) Create(values ...*model.ClusterBind) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c clusterBindDo) CreateInBatches(values []*model.ClusterBind, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c clusterBindDo) Save(values ...*model.ClusterBind) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c clusterBindDo) First() (*model.ClusterBind, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ClusterBind), nil
	}
}

func (c clusterBindDo) Take() (*model.ClusterBind, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ClusterBind), nil
	}
}

func (c clusterBindDo) Last() (*model.ClusterBind, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ClusterBind), nil
	}
}

func (c clusterBindDo) Find() ([]*model.ClusterBind, error) {
	result, err := c.DO.Find()
	return result.([]*model.ClusterBind), err
}

func (c clusterBindDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ClusterBind, err error) {
	buf := make([]*model.ClusterBind, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c clusterBindDo) FindInBatches(result *[]*model.ClusterBind, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c clusterBindDo) Attrs(attrs ...field.AssignExpr) *clusterBindDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c clusterBindDo) Assign(attrs ...field.AssignExpr) *clusterBindDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c clusterBindDo) Joins(fields ...field.RelationField) *clusterBindDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c clusterBindDo) Preload(fields ...field.RelationField) *clusterBindDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c clusterBindDo) FirstOrInit() (*model.ClusterBind, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ClusterBind), nil
	}
}

func (c clusterBindDo) FirstOrCreate() (*model.ClusterBind, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ClusterBind), nil
	}
}

func (c clusterBindDo) FindByPage(offset int, limit int) (result []*model.ClusterBind, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c clusterBindDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c clusterBindDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c *clusterBindDo) withDO(do gen.Dao) *clusterBindDo {
	c.DO = *do.(*gen.DO)
	return c
}
